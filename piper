#!/usr/bin/env bash
# piper â€” smarter wrapper for Piper TTS (CLI only)
# - Auto-activates your piper venv
# - Uses ~/piper-voices
# - Has subcommands: say | batch-us | list | download | which
# - Cleans up old temp files (>1h) in TMPDIR

set -euo pipefail

VOICE_DIR="${VOICE_DIR:-$HOME/piper-voices}"
TMPDIR="${TMPDIR:-/tmp}"

# Prefer your existing venv if present
for VENV in "$HOME/.local/piper-venv" "$HOME/piper-venv"; do
  [ -f "$VENV/bin/activate" ] && source "$VENV/bin/activate" && break
done

PY_BIN="${PY_BIN:-python}"
PIPER_BIN="${PIPER_BIN:-piper}"

DEFAULT_VOICE="$VOICE_DIR/en_US-amy-low.onnx"

usage() {
  cat <<'EOF'
Usage:
  piper say [-m MODEL.onnx] [-o OUT.wav] [-- ARGS...] "text"
  piper batch-us ["text"]             # synthesize sample with all en_US voices -> /tmp
  piper list [local|all] [FILTER]     # list voices (local = downloaded, all = catalog)
  piper download VOICE_ID [...]       # download voices into VOICE_DIR
  piper which                         # show paths/binaries/voice dir
Notes:
  - MODEL defaults to $PIPER_VOICE or en_US-amy-low if present.
  - Extra piper flags after -- are passed through.
EOF
}

die() { echo "Error: $*" >&2; exit 1; }
need() { command -v "$1" >/dev/null 2>&1 || die "missing '$1' in PATH"; }
ensure_dirs() { mkdir -p "$VOICE_DIR"; }

list_catalog() {
  $PY_BIN -m piper.download_voices | awk '{print $1}'
}

list_local() {
  ls -1 "$VOICE_DIR"/*.onnx 2>/dev/null | xargs -n1 basename | sed 's/\.onnx$//'
}

download_voices() {
  ensure_dirs
  need "$PY_BIN"
  $PY_BIN -m piper.download_voices --download-dir "$VOICE_DIR" "$@"
}

resolve_model() {
  local model="${1:-}"
  if [ -n "$model" ]; then echo "$model"; return; fi
  if [ -n "${PIPER_VOICE:-}" ]; then echo "$PIPER_VOICE"; return; fi
  if [ -f "$DEFAULT_VOICE" ]; then echo "$DEFAULT_VOICE"; return; fi
  die "No model specified and default not found. Set -m / $PIPER_VOICE or download a voice."
}

cmd_say() {
  ensure_dirs
  need "$PIPER_BIN"
  local model="" out="$TMPDIR/piper.wav" text="" passthrough=()
  while (( $# )); do
    case "$1" in
      -m|--model) shift; model="${1:-}";;
      -o|--output) shift; out="${1:-}";;
      --) shift; passthrough=("$@"); break;;
      *) text="${text:+$text }$1";;
    esac
    shift || true
  done
  [ -n "$text" ] || die "No text provided."
  model="$(resolve_model "$model")"
  echo "$text" | "$PIPER_BIN" --model "$model" --output_file "$out" "${passthrough[@]}"
  if [ -t 1 ]; then
    if command -v aplay >/dev/null 2>&1; then aplay "$out" || true
    elif command -v ffplay >/dev/null 2>&1; then ffplay -nodisp -autoexit "$out" || true
    fi
  fi
  echo "$out"
}

cmd_batch_us() {
  ensure_dirs
  need "$PIPER_BIN"; need "$PY_BIN"
  local text="${1:-This is a sample message generated by Piper text to speech.}"
  mapfile -t voices < <(list_catalog | awk -F'[[:space:]]+' '/^en_US-/{print $1}' | sort -u)
  [ ${#voices[@]} -gt 0 ] || die "No en_US voices found."
  for vid in "${voices[@]}"; do
    model="$VOICE_DIR/$vid.onnx"
    [ -f "$model" ] || $PY_BIN -m piper.download_voices --download-dir "$VOICE_DIR" "$vid"
  done
  shopt -s nullglob
  for model in "$VOICE_DIR"/en_US-*.onnx; do
    base="$(basename "$model" .onnx)"
    out="$TMPDIR/piper_${base}.wav"
    echo "Generating: $out"
    echo "$text" | "$PIPER_BIN" --model "$model" --output_file "$out"
    echo "$out"
  done
}

cmd_list() {
  local mode="${1:-local}" ; shift || true
  local filter="${1:-}"
  case "$mode" in
    local) list_local ;;
    all) list_catalog ;;
    *) die "Use: piper list [local|all] [FILTER]" ;;
  esac | {
    if [ -n "$filter" ]; then grep -i "$filter" || true
    else cat
    fi
  }
}

cmd_which() {
  cat <<EOF
PY_BIN    : $(command -v "$PY_BIN" || echo "not found")
PIPER_BIN : $(command -v "$PIPER_BIN" || echo "not found")
VOICE_DIR : $VOICE_DIR
DEFAULT   : $DEFAULT_VOICE
VENV used : $(echo "${VIRTUAL_ENV:-none}")
EOF
}

# ---- main ----
sub="${1:-}"; shift || true
case "$sub" in
  say)        cmd_say "$@";;
  batch-us)   cmd_batch_us "$@";;
  list)       cmd_list "$@";;
  download)   [ $# -gt 0 ] || die "Provide at least one VOICE_ID"; download_voices "$@";;
  which)      cmd_which;;
  -h|--help|"") usage;;
  *) echo "Unknown command: $sub"; usage; exit 1;;
esac

# Cleanup old wavs (>1h) every run
find "$TMPDIR" -maxdepth 1 -type f -name 'piper_*.wav' -mmin +60 -delete 2>/dev/null || true

